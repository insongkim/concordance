% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/concord_uspc_ipc.R
\name{concord_uspc_ipc}
\alias{concord_uspc_ipc}
\title{Converting USPC and IPC Codes}
\source{
Concordance tables provided by:
\itemize{
  \item United States Patent and Trademark Office <https://www.uspto.gov/web/patents/classification/selectnumwithtitle.htm>
}
}
\usage{
concord_uspc_ipc(sourcevar, origin, destination, dest.digit = 9, all = FALSE)
}
\arguments{
\item{sourcevar}{An input character vector of USPC or IPC codes. The function accepts 3-digit codes for USPC (class) and 5 to 11-digit codes for USPC (subclass), and 1-digit codes for IPC (section), 3-digit codes for IPC (class), 4-digit codes for IPC (subclass), 6 to 8-digit codes for IPC (group), and 9 to 13-digit codes for IPC (subgroup).}

\item{origin}{A string setting the input patent classification: "USPC" (combined), "USPC2012", "IPC" (combined), "IPC2012".}

\item{destination}{A string setting the output patent classification: "USPC" (combined), "USPC2012", "IPC" (combined), "IPC2012".}

\item{dest.digit}{An integer indicating the preferred number of digits for output codes. Allows 3 digits for USPC (class) and 5 to 11-digits for USPC (subclass), and 1 digit for IPC (section), 3 digits for IPC (class), 4 digits for IPC (subclass), 6 to 8 digits for IPC (group), and 9 to 12 digits for IPC (subgroup). The default is 9 digits.}

\item{all}{Either TRUE or FALSE. If TRUE, the function will return (1) all matched outputs for each input, and (2) the share of occurrences for each matched output among all matched outputs. Users can use the shares as weights for more precise concordances. If FALSE, the function will only return the matched output with the largest share of occurrences (the mode match). If the mode consists of multiple matches, the function will return the first matched output.}
}
\value{
The matched output(s) for each element of the input vector. Either a list object when all = TRUE or a character vector when all = FALSE.
}
\description{
Concords the Unites State Patent Classification codes (USPC 2012) to and from International Patent Classification codes (IPC 2012).
}
\note{
Always include leading zeros in USPC codes for class, but not subclass (e.g., use 002 for USPC class, instead of 2, and 002/2.11 for USPC subclass), a space in IPC codes between subclass and group (e.g., use A01B 1 for IPC group, instead of A01B1), and leading zeros in IPC codes between group and subgroup, separatedy by "/" (e.g., use A01B 1/02 for IPC subgroup, instead of A01B 1/2)---results may be buggy otherwise.
}
\examples{
# one input: one-to-one match
concord_uspc_ipc("002/1", 
                 origin = "USPC", destination = "IPC", 
                 dest.digit = 9, all = FALSE)

# two inputs: multiple-to-one match
concord_uspc_ipc(c("002/2.11", "002/2.12"), 
                 origin = "USPC", destination = "IPC", 
                 dest.digit = 9, all = FALSE)

# two inputs: repeated
concord_uspc_ipc(c("002/7", "002/7"), 
                 origin = "USPC", destination = "IPC", 
                 dest.digit = 9, all = FALSE)

# one to multiple matches
concord_uspc_ipc("A41F", 
                 origin = "IPC", destination = "USPC", 
                 dest.digit = 3, all = TRUE)

# if no match, will return NA and give warning message
concord_uspc_ipc("A40F", 
                 origin = "IPC", destination = "USPC", 
                 dest.digit = 3, all = FALSE)

# 10-digit inputs, 8-digit outputs
concord_uspc_ipc("B63C 11/10", 
                 origin = "IPC", destination = "USPC", 
                 dest.digit = 8, all = TRUE)

# 3-digit inputs, 1-digit outputs
concord_uspc_ipc("002", 
                 origin = "USPC", destination = "IPC", 
                 dest.digit = 1, all = TRUE)
}
